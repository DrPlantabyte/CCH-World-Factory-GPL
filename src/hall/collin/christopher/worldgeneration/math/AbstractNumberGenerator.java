/*
CCH World Factory - GPL

Copyright (C) 2014 Christopher Collin Hall
email: explosivegnome@yahoo.com

CCH World Factory - GPL is distributed under the GNU General Public 
License (GPL) version 3. A non-GPL branch of the CCH World Factory 
also exists. For non-GPL licensing options, contact the copyright 
holder, Christopher Collin Hall (explosivegnome@yahoo.com). 

CCH World Factory - GPL is free software: you can redistribute it 
and/or modify it under the terms of the GNU General Public License 
as published by the Free Software Foundation, either version 3 of 
the License, or (at your option) any later version.

CCH World Factory - GPL is distributed in the hope that it will be 
useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with CCH World Factory - GPL.  If not, see 
<http://www.gnu.org/licenses/>.

*/
/*
 * Copyright 2014 - Christopher Collin Hall ( explosivegnome@yahoo.com )
 * All rights reserved.
 */
package hall.collin.christopher.worldgeneration.math;

/**
 * This abstract class is used as a superclass for number generators (typically 
 * psuedo-random number generators), provided for easier integration of custom 
 * random number generators.
 * @author Christopher Collin Hall
 */
public abstract class AbstractNumberGenerator {
	/**
	 * Generates a number between 0 and 1. 
	 * If not overridden by the extending class, the default implementation is 
	 * as follows:<br/><code>
	 * return (double)(nextLong() & 0x000fffffffffffffL)/((double)0x000fffffffffffffL);
	 * </code>
	 * @return A number between 0 and 1.
	 */
	public double nextDouble(){
		long rand = nextLong();
		return (double)(rand & 0x000fffffffffffffL)/((double)0x000fffffffffffffL);
	}
	/**
	 * Generates a number between 0 and 1. 
	 * If not overridden by the extending class, the default implementation is 
	 * as follows:<br/><code>
	 * return (float)(nextInt() & 0x007fffff)/((float) 0x007fffff);
	 * </code>
	 * @return A number between 0 and 1.
	 */
	public float nextFloat(){
		int rand = nextInt();
		return (float)(rand & 0x007fffff)/((float) 0x007fffff);
	}
	/**
	 * Generates an integer whose range is unbound.
	 * If not overridden by the extending class, the default implementation is 
	 * as follows:<br/><code>
	 * return (int)nextLong();
	 * </code>
	 * @return An integer
	 */
	public int nextInt(){
		return (int)nextLong();
	}
	/**
	 * Generates a long integer whose range is unbound. This method must be 
	 * overridden by the extending class.
	 * @return An integer
	 */
	public abstract long nextLong();
	/**
	 * Returns true or false.
	 * If not overridden by the extending class, the default implementation is 
	 * as follows:<br/><code>
	 * return (nextInt() & 0x10) == 0;
	 * </code>
	 * @return true or false
	 */
	public boolean nextBoolean(){
		return (nextInt() & 0x10) == 0;
	}
	/**
	 * Fills the given array with generated byte values.
	 * @param byteBuffer A byte array to be filled.
	 */
	public abstract void nextBytes(byte[] byteBuffer);
	/**
	 * Generates a number between <code>min</code> and <code>max</code>.
	 * @param min minimum value that can be generated
	 * @param max maximum value that can be generated
	 * @return A number between <code>min</code> and <code>max</code>
	 */
	public double nextDouble(double min, double max){
		return (max-min)*nextDouble()+min;
	}
	/**
	 * Generates a number between <code>min</code> and <code>max</code>.
	 * @param min minimum value that can be generated
	 * @param max maximum value that can be generated
	 * @return A number between <code>min</code> and <code>max</code>
	 */
	public float nextFloat(float min, float max){
		return (max-min)*nextFloat()+min;
	}
	/**
	 * Generates a number between <code>0</code> (inclusive) and 
	 * <code>limit</code> (exclusive).
	 * @param limit Upper limit on generated integer
	 * @return A number between <code>0</code> (inclusive) and 
	 * <code>limit</code> (exclusive).
	 */
	public int nextInt(int limit){
		return (nextInt() & 0x7FFFFFFF) % limit;
	}
	/**
	 * This is the <code>java.lang.String.hashCode()</code> implementation, 
	 * expanded to 64 bits. This method exists to future-proof the generation 
	 * of random number seeds from Strings. If passed a string that can be 
	 * parsed as an integer, that (64-bit) integer value will be returned.
	 * @param string A String object to serve as the seed for the hash code.
	 * @return Returns the hash code of the string using the algorithm that 
	 * became standard in Java 1.2 <code>java.lang.String.hashCode()</code>, 
	 * but expanded out to 64-bit integers. 
	 * 
	 */
	public static long stringHashCode(String string){
		// return number value if number, otherwise use string hash code
		boolean isNumber = true;
		for(int i = 0; i < string.length(); i++){
			if(i == 0 && string.charAt(i) == '-') continue;
			if(Character.isDigit(string.charAt(i)) == false){
				isNumber = false;
				break;
			}
		}
		if(isNumber){
			try{
				return Long.parseLong(string);
			} catch(NumberFormatException ex){
				// not a number, do nothing
			}
		}
		long h = 0;
		for (int i = 0; i < string.length(); i++) {
			h = 31*h + string.charAt(i);
		}
		return h;
	}
}
