/*
CCH World Factory - GPL

Copyright (C) 2014 Christopher Collin Hall
email: explosivegnome@yahoo.com

CCH World Factory - GPL is distributed under the GNU General Public 
License (GPL) version 3. A non-GPL branch of the CCH World Factory 
also exists. For non-GPL licensing options, contact the copyright 
holder, Christopher Collin Hall (explosivegnome@yahoo.com). 

CCH World Factory - GPL is free software: you can redistribute it 
and/or modify it under the terms of the GNU General Public License 
as published by the Free Software Foundation, either version 3 of 
the License, or (at your option) any later version.

CCH World Factory - GPL is distributed in the hope that it will be 
useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with CCH World Factory - GPL.  If not, see 
<http://www.gnu.org/licenses/>.

*/
/*
 * Copyright 2014 - Christopher Collin Hall ( explosivegnome@yahoo.com )
 * All rights reserved.
 */
package hall.collin.christopher.worldgeneration.math;

/**
 * Java implementation of George Marsaglia's Xor-Shift PRNG. See 
 * http://en.wikipedia.org/wiki/Xorshift
 * @author Christopher Collin Hall
 */
public class XorShiftRandomNumberGenerator extends AbstractNumberGenerator{

	private final long[] seeds;
	private final boolean threadSafe;
	private final java.util.concurrent.locks.Lock threadLock;
	
	/**
	 * Constructs a XorShiftRandomNumberGenerator with the given seeds. A 
	 * XorShiftRandomNumberGenerator needs 4 seeds. For a quick instantiation, 
	 * it is appropriate to create a java.util.Random with the millisecond time 
	 * as its seed and invoke its nextLong() method to generate the seeds for 
	 * this object.
	 * @param s1 A 64-bit seed number
	 * @param s2 A 64-bit seed number
	 * @param s3 A 64-bit seed number
	 * @param s4 A 64-bit seed number
	 * @param threadSafe If true, then all of the methods will be thread-safe 
	 * in as much that concurrently invoking random number generator methods will 
	 * have first-in-first-out behavior, giving each thread a different random 
	 * number and maintaining a stable state.
	 */
	public XorShiftRandomNumberGenerator(long s1, long s2, long s3, long s4, boolean threadSafe){
		seeds = new long[4];
		seeds[0] = s1;
		seeds[1] = s2;
		seeds[2] = s3;
		seeds[3] = s4;
		this.threadSafe = threadSafe;
		if(threadSafe){
			threadLock = new java.util.concurrent.locks.ReentrantLock();
		} else {
			threadLock = null;
		}
	}
	/**
	 * Generates a long integer whose range is unbound. This method must be 
	 * overridden by the extending class.
	 * @return An integer
	 */
	@Override
	public long nextLong() {
		if(threadSafe){
			threadLock.lock();
			try{
				return xorShift();
			} finally{
				threadLock.unlock();
			}
		} else {
			return xorShift();
		}
	}
	
	private long xorShift(){
		long t = seeds[0] ^ (seeds[0] << 11);
		seeds[0] = seeds[1];
		seeds[1] = seeds[2];
		seeds[2] = seeds[3];
		return seeds[3] = seeds[3] ^ (seeds[3] >> 19) ^ (t ^ (t >> 8));
	}
	/**
	 * Fills the given array with generated byte values.
	 * @param byteBuffer A byte array to be filled.
	 */
	@Override
	public void nextBytes(byte[] byteBuffer) {
		int i = 0;
		int shift = 8*8;
		long source = nextLong();
		while(i < byteBuffer.length){
			if(shift == 0){
				shift = 8*8;
				source = nextLong();
			}
			byteBuffer[i] = (byte)((source >>> shift & 0xFF));
			i++;
			shift -= 8;
		}
	}
	
	@Deprecated
	public static void main(String[] a){
		int size = 400;
		java.awt.image.BufferedImage bimg = new java.awt.image.BufferedImage(size,size,java.awt.image.BufferedImage.TYPE_INT_ARGB);
		XorShiftRandomNumberGenerator prng = new XorShiftRandomNumberGenerator(System.currentTimeMillis(),System.nanoTime(),Runtime.getRuntime().freeMemory(), System.currentTimeMillis() ^ System.nanoTime(),false);
		for(int x = 0; x < size; x++){
			for(int y = 0; y < size; y++){
				bimg.setRGB(x, y, java.awt.Color.HSBtoRGB(0, 0, prng.nextFloat()));
			}
		}
		javax.swing.JOptionPane.showMessageDialog(null, new javax.swing.JLabel(new javax.swing.ImageIcon(bimg)));
		
	}
	
}
